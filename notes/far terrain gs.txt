# Geometry-shader based insta-meshing of far terrain data

___________________________


Feed it points

Output triangles

Worst case scenario, per region sum
256x256x(2 + 1)*2 = 393.216 triangles

If we do it per-chunk (1 point / chunk )
32x32x(2+1)*2 = 6144 tris
18.432 vertices (VS 1024 / input primitive max)

Subdivide each chunk into 4x4 points covering each 8x8 blocks
8*8*(2+1)*2 = 384
 = 1152 almost there ...
 
8x8 points covering each 4x4 blocks
4*4*(2+1)*2 = 96 MAX substris
288 vertices/point !

Suuuw : Render a region = 

drawInstancied(8 * 8 chunks)
	Draw data = 4x8 grid of points
	Instanciated 32x in the GS
	(offsetting said data)
	
_______________________

proc subdvd(x, y, lod) {
	if(lvl >= maxLvl)
		outTri(x, y, lod)
	else
		//Grab data to check if next lod should be subdivided
		Lod nlod = lod++;
		int h00 = texLod(x + 0, y + 0, nlod);
		int h10 = texLod(x + nlod.step, y + 0, nlod);
		int h01 = texLod(x + 0, y + nlod.step, nlod);
		int h11 = texLod(x + nlod.step, y + nlod.step, nlod);
		
		//If it shouldn't, just output a triangle at this lod
		if(h00 == h10 && h00 == h01 && h00 == h11) {
			outTri(x, y, lod);
		} else {
			//Recursive call on each cell
			subdvd(x + 0, y + 0, nlod);
			subdvd(x + nlod.step, y + 0, nlod);
			subdvd(x + 0, y + nlod.step, nlod);
			subdvd(x + nlod.step, y + nlod.step, nlod);
		}
}

proc outTri(x, y, lod) {
	int h = texLod(x, y, lod);
	quad(x, y, x + lod.step, y + lod.step, h);
	
	//"cheap" trick: use a min() mipmap chain for a conservative skirt size
	int hnx = texLod(x - lod.step, y, lod);
	if(hnx != h) {
	
		//Note invert triangle winding order & normals based on bool(hnx < h)
		wall(x, y, 0, lod.step, hnx, h); // make a wall of x-size = 0 and z-size = lod.step, in short the skirt going from hnx to h
	}
	
	int hnz = texLod(x, y - lod.step, lod);
	if(hnz != h) {
		wall(x, y, lod.step, 0, hnz, h); // make a wall of z-size = 0 and x-size = lod.step, in short the skirt going from hnz to h
	}
	
}