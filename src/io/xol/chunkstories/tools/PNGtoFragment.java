package io.xol.chunkstories.tools;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.Calendar;

import javax.imageio.ImageIO;

//(c) 2015-2016 XolioWare Interactive
// http://chunkstories.xyz
// http://xol.io

public class PNGtoFragment
{
	public static void main(String[] args)
	{
		System.out.println("PNG to XolioEngine Fragments converter");
		System.out
				.println("Will take heightmap.png and forest.png and make a complete map out of them.");
		System.out
				.println("(c) 2014 XolioWare Interactive - All right reserved");
		boolean gaussMode = true;
		int gaussRadius = 5;

		try
		{
			BufferedImage image = ImageIO.read(new File("heightmap.png"));
			BufferedImage forests = ImageIO.read(new File("forests.png"));
			int fragmentsX = (int) Math.ceil((image.getWidth() / 2) / 100) * 2;
			int fragmentsY = (int) Math.ceil((image.getHeight() / 2) / 100) * 2;
			System.out.println("Generating heightArray ( gauss = " + gaussMode
					+ (gaussMode ? (" radius=" + gaussRadius) : "") + " )");
			float[][] heightArray = new float[image.getWidth()][image
					.getWidth()];
			float[][] gaussCache = new float[image.getWidth()][image.getWidth()];

			int aa = 0;
			int amountTodo = image.getWidth() * image.getHeight();
			int lastPercentShown = -10;

			for (int i = 0; i < image.getWidth(); i++)
			{
				for (int j = 0; j < image.getHeight(); j++)
				{
					Color color = new Color(image.getRGB(i, j));
					if (!gaussMode)
					{
						heightArray[i][j] = color.getRed();
					} else
					{
						gaussCache[i][j] = color.getRed();
					}
				}
			}

			if (gaussMode)
			{
				System.out.print("Processing gauss effect on base image ... ");
				for (int i = 0; i < image.getWidth(); i++)
				{
					for (int j = 0; j < image.getHeight(); j++)
					{
						if (aa * 100 / amountTodo >= lastPercentShown + 10)
						{
							System.out.print((10 + aa * 100 / amountTodo)
									+ "% ");
							lastPercentShown = aa * 100 / amountTodo;
						}

						float sum = 0;
						float div = 0;
						for (int a = Math.max(0, i - gaussRadius); a < Math
								.min(image.getWidth(), i + gaussRadius); a++)
						{
							for (int b = Math.max(0, j - gaussRadius); b < Math
									.min(image.getHeight(), j + gaussRadius); b++)
							{
								// Color color = new Color(image.getRGB(a, b));
								float poid = 1 - Math.min(1,
										(Math.abs(a - i) + Math.abs(b - j))
												/ 1f / gaussRadius
												/ gaussRadius);
								sum += poid * 1f * gaussCache[a][b];// color.getRed();
								// System.out.println("i:"+i+"j:"+j+"a:"+a+"b:"+b+"poid:"+poid+"sum:"+sum+"div:"+div);
								div += poid;
							}
						}
						heightArray[i][j] = sum / div;
						aa++;
					}
				}
			}
			System.out.println("Done !");
			System.out.println("Splitting image of " + image.getWidth()
					+ "px by " + image.getHeight() + " into " + fragmentsX
					+ " x " + fragmentsY + " fragments of 100mx100m");
			System.out.print("Processing ... ");
			int a = 0;
			amountTodo = fragmentsX * fragmentsY;
			lastPercentShown = -10;
			for (int x = -fragmentsX / 2; x < fragmentsX / 2; x++)
			{
				// System.out.println(x);
				for (int y = -fragmentsY / 2; y < fragmentsY / 2; y++)
				{
					if (a * 100 / amountTodo >= lastPercentShown + 10)
					{
						System.out.print((10 + a * 100 / amountTodo) + "% ");
						// System.out.println("Processing ... ("+a*100/amountTodo+"%)");
						lastPercentShown = a * 100 / amountTodo;
					}

					File file = new File("./worlds/converted/fragments/" + x
							+ "." + y + ".fragment");
					if (!file.exists())
						file.createNewFile();
					BufferedWriter bufferedWriter = new BufferedWriter(
							new FileWriter(file));
					bufferedWriter.write("#Fragment format file v1.0.1 \n");
					bufferedWriter
							.write("#Autogenerated by PNGtoFragment on timestamp "
									+ Calendar.getInstance().getTime()
											.getTime() + "\n");
					bufferedWriter.write("!heightmap\n");
					for (int i = 0; i < 101; i++)
					{
						for (int j = 0; j < 101; j++)
						{
							int k = x * 100 + i + fragmentsX / 2 * 100;
							int l = y * 100 + j + fragmentsY / 2 * 100;
							if (k >= 0 && k < image.getWidth() && l >= 0
									&& l < image.getHeight())
							{
								bufferedWriter.write(heightArray[k][l] + " ");
							} else
								bufferedWriter.write("0.0 ");
						}
						bufferedWriter.write("\n");
					}
					bufferedWriter.write("!forests\n");
					for (int i = 0; i < 101; i++)
					{
						for (int j = 0; j < 101; j++)
						{
							int k = x * 100 + i + fragmentsX / 2 * 100;
							int l = y * 100 + j + fragmentsY / 2 * 100;
							if (k >= 0 && k < image.getWidth() && l >= 0
									&& l < image.getHeight())
							{
								Color color = new Color(forests.getRGB(k, l));
								bufferedWriter.write(color.getRed() + " ");
							} else
								bufferedWriter.write("0 ");
						}
						bufferedWriter.write("\n");
					}
					bufferedWriter.close();
					a++;
					// y++;
				}
			}
			System.out.println("Done !");
			System.out.println("Conversion finished.\nWrote " + a + "/"
					+ amountTodo + " fragment files.");

		} catch (Exception e)
		{
			System.out.println("Error : ");
			e.printStackTrace();
		}
	}

}
