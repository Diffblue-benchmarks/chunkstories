// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the application plugin to add support for building an application
apply plugin: 'application'

apply plugin: 'maven'

//Make this into a shadow jar
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'

version = rootProject.version
description = 'Multiplatform PC Client using LWJGL3'

/* LWJGL3 deps */

/*
import org.gradle.internal.os.OperatingSystem

switch ( OperatingSystem.current() ) {
	case OperatingSystem.WINDOWS:
		project.ext.lwjglNatives = "natives-windows"
		break
	case OperatingSystem.LINUX:
		project.ext.lwjglNatives = "natives-linux"
	break
	case OperatingSystem.MAC_OS:
		project.ext.lwjglNatives = "natives-macos"
		break
}*/

/*project.ext.natives = ["natives-windows", "natives-linux", "natives-macos"];
project.ext.lwjglVersion = "3.1.1"

configurations {
	multiplatform {
		extendsFrom runtime
	}
}*/

dependencies {

	//LWJGL3 masterrace
	//compile "org.lwjgl:lwjgl:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-glfw:${lwjglVersion}"
	//compile "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-openal:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-opengl:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-stb:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-tinyfd:${lwjglVersion}"
	//When running on our debug computer, it's safe to assume the OS that will run the game is the same than the one who'll compile it.
	//runtime "org.lwjgl:lwjgl:${lwjglVersion}:${lwjglNatives}"
	runtime "org.lwjgl:lwjgl-glfw:${lwjglVersion}:${lwjglNatives}"
	//runtime "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}:${lwjglNatives}"
	runtime "org.lwjgl:lwjgl-openal:${lwjglVersion}:${lwjglNatives}"
	runtime "org.lwjgl:lwjgl-opengl:${lwjglVersion}:${lwjglNatives}"
	runtime "org.lwjgl:lwjgl-stb:${lwjglVersion}:${lwjglNatives}"
	runtime "org.lwjgl:lwjgl-tinyfd:${lwjglVersion}:${lwjglNatives}"
	//When compiling a redistribuable jar, we need ALL natives in it!
	project.ext.natives.each {
		//multiplatform ("org.lwjgl:lwjgl:${lwjglVersion}:" + it)
		multiplatform "org.lwjgl:lwjgl-glfw:${lwjglVersion}:" + it
		//multiplatform "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}:" + it
		multiplatform "org.lwjgl:lwjgl-openal:${lwjglVersion}:" + it
		multiplatform "org.lwjgl:lwjgl-opengl:${lwjglVersion}:" + it
		multiplatform "org.lwjgl:lwjgl-stb:${lwjglVersion}:" + it
		multiplatform "org.lwjgl:lwjgl-tinyfd:${lwjglVersion}:" + it
	}
}

// Dependencies from subprojects
dependencies {
	//compile project(':core')
	compile project(':common')
	compile project(':server')
}

// Define the main class for the application
mainClassName = 'io.xol.chunkstories.client.Client'

jar {
	manifest {
		attributes  'Implementation-Title': 'Chunk Stories Client',
					'Implementation-Version': version
	}
	
	classifier = 'bare'
}

processResources {
	dependsOn rootProject.versionTxt
}

shadowJar {
	baseName = 'chunkstories'
	classifier = null
	version = null
	configurations = [project.configurations.multiplatform]
	
	dependencies {
		exclude(dependency(group: 'io.xol.chunkstories', name: 'core', version: contentRevisionBuiltAgainst, ext: 'jar'))
    }

}

run { 
	doFirst {
		/* Need to split the space-delimited value in the exec.args */
		println "Running client; Setting project dir : " + rootProject.projectDir
		workingDir = rootProject.projectDir
		args = [new String("--dir="+rootProject.projectDir), new String("--core=" + rootProject.ext.actualContentLocation)]
		println args
	}

	//Depends on the core content being present.
	afterEvaluate {
		dependsOn(':common:setupContentLocation')
	}
}

//We want to be able to publish artifacts of the client, even if we don't bundle the source.

//Create a properties.gradle with login credentials to use this.
//Watch out: wagon-ssh is an old mess and WILL NOT TAKE EdDSA host keys
//You MUST ask the server for one of those and replace whatever you had for it in known_hosts
if(hasProperty('uploadUsername')) {
	println 'Login credentials found'
	uploadArchives {
		repositories {
				mavenDeployer {
       				configuration = configurations.deployerJars	
					
					if(project.hasProperty('uploadPrivateKey')) {
						println 'Found private key'
						repository(url: "scp://xol.io/home/maven-user/maven-repo") {				
							authentication(userName: uploadUsername, privateKey: uploadPrivateKey)
		    				}
					}
					else {
						println 'Found password'
						repository(url: "scp://xol.io/home/maven-user/maven-repo") {				
							authentication(userName: uploadUsername, password: uploadPassword)
		    				}
					}
				}
		}
	}
}

configurations.archives.with { artifacts.remove artifacts.find { it.archiveTask.is distZip } } 
configurations.archives.with { artifacts.remove artifacts.find { it.archiveTask.is distTar } } 
configurations.archives.with { artifacts.remove artifacts.find { it.archiveTask.is shadowDistZip } } 
configurations.archives.with { artifacts.remove artifacts.find { it.archiveTask.is shadowDistTar } } 
